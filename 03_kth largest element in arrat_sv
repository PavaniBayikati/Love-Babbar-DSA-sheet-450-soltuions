//my version of code 
public class QuickSelect {
    
    // Function to partition the array
    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];

        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        // Swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }

    // Function to perform QuickSelect
    public static int quickSelect(int[] arr, int low, int high, int k) {
        if (low <= high) {
            int pi = partition(arr, low, high);

            // Print the array state after partitioning
            System.out.println("Array after partitioning around pivot " + arr[pi] + ": " + java.util.Arrays.toString(arr));
            
            if (pi == k) { // Pivot is the k-th smallest element
                return arr[pi];
            } else if (pi > k) { // k-th element is in the left subarray
                return quickSelect(arr, low, pi - 1, k);
            } else { // k-th element is in the right subarray
                return quickSelect(arr, pi + 1, high, k);
            }
        }
        return arr[low];
    }

    // Main function to test QuickSelect
    public static void main(String[] args) {
        int[] arr = {7, 2, 1, 6, 8, 5, 3, 4};
        int k = 2; // We are looking for the 3rd smallest element (0-indexed)

        int result = quickSelect(arr, 0, arr.length - 1, k);
        System.out.println("The " + (k + 1) + "-th smallest element is " + result);
    }
}
